services:
  scanlationtracker.api:
    build:
      context: ..
      dockerfile: backend/ScanlationTracker.Api/Dockerfile
    depends_on:
      scanlationtracker.migration.seeding:
        condition: service_completed_successfully
      loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    environment:
      DOTNET_ENVIRONMENT: Development
      PostgreSql__ConnectionString: Host=postgresql;Username=postgres;Password=Passw0rd!;Database=ScanlationTrackerDb
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://loki:3100/otlp/v1/logs
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://prometheus:9090/api/v1/otlp/v1/metrics
    ports:
      - 8080:8080

  scanlationtracker.seriesupdater:
    build:
      context: ..
      dockerfile: backend/ScanlationTracker.SeriesUpdater/Dockerfile
    security_opt:
      - seccomp:../backend/ScanlationTracker.SeriesUpdater/seccomp-profile.json
    depends_on:
      scanlationtracker.migration.seeding:
        condition: service_completed_successfully
      loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    environment:
      DOTNET_ENVIRONMENT: Development
      PostgreSql__ConnectionString: Host=postgresql;Username=postgres;Password=Passw0rd!;Database=ScanlationTrackerDb
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://loki:3100/otlp/v1/logs
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://prometheus:9090/api/v1/otlp/v1/metrics

  scanlationtracker.migration.seeding:
    build:
      context: ..
      dockerfile: backend/ScanlationTracker.Migration.Seeding/Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      PostgreSql__ConnectionString: Host=postgresql;Username=postgres;Password=Passw0rd!;Database=ScanlationTrackerDb

  postgresql:
    image: postgres:17.4
    environment:
      POSTGRES_PASSWORD: Passw0rd!
    ports:
      - 5432:5432
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s

  loki:
    image: grafana/loki:3.5.1
    volumes:
      - loki-data:/loki
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 3s
      retries: 10

  prometheus:
    image: prom/prometheus:v3.4.1
    command:
      - --web.enable-otlp-receiver
      - --config.file=/dev/null
    volumes:
      - prometheus-data:/prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/ready || exit 1"]
      interval: 3s

  grafana:
    image: grafana/grafana:12.0.1
    depends_on:
      loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      LOKI_URL: http://loki:3100
      PROMETHEUS_URL: http://prometheus:9090
    ports:
      - 3000:3000
    volumes:
      - ../observability/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ../observability/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ../observability/grafana-dashboards:/etc/dashboards

volumes:
  postgresql-data:
  loki-data:
  prometheus-data:
